Sinter is an HTML5 implementation of affine-projective steiner triple
system (STS) card games.  These are card games in which you are trying to
find card triples satisfying a simple rule.  In the bit respresentation,
the rule is that XOR-ing two of the cards produces the 3rd one.  So for
each bit position, exactly 0 or 2 of the 3 cards have a 1 bit.
For example, for 1010 and 0110 the matching card is 1100.

These card games exist for all card deck sizes of the form
Product(2^i - 1)
where the i's are positive integers (not necessarily distinct).
The popular Set brand card game has i's = 2,2,2,2.

Sinter supports all 20 non-trivial deck sizes under 256:
    i's    bits
7   3      3
9   2^2    4
15  4      4
21  2,3    5
27  2^3    6
31  5      5
45  2,4    6
49  3^2    6
63  6/2^2,3 6/7
81  2^4    8
93  2,5    7
105 3,4    7
127 7      7
135 2^2,4  8
147 2,3^2  8
189 2,6/2^3,3 8/9
217 3,5    8
225 4^2    8
243 2^5    10
255 8      8

This is all of them, as given by this Haskell program:
> sortBy (comparing snd) $ filter ((< 256) . snd) $ map (\ a -> (a, product $ map (\ x -> 2 ^ x - 1) a)) $ filter ((<= 8) . last) $ map (map ((+ 2) . sum) . tail . inits) $ nub $ concatMap (tail . inits) $ sequence $ replicate 5 [0..6]

All have 5 or fewer property-sets with 8 or fewer bits each,
and 10 or fewer total bits per card.

Compatilibily
- We only currently test in Google Chrome
  Chromium 18.0.1025.151 (Developer Build 130497 Linux) Ubuntu 12.04
- We used to test in Firefox but the JS was running so much more slowly there
  that we gave that up for now (probably better these days?).

Todo
- Multiplayer?
- Scoreboard?
- Analytics about kinds of sets one tends to see or miss
- Better calculation of best number of cards to deal initially?
- Are there deck sizes n for which a bit-XOR-based STS exists but none are
  affine-projective?
  There are STS's whenever n = 1 or 3 (mod 6); what's a good
  representation for non-affine-projective ones; can they work as a game?
- Translation of the bit representation into card-property representation.

Card-Property Representation
- One way to present up to 10 bits of card info is to show up to 5 bit pairs
and for each pair to have a property w/ 3 possibilities (and possibly one
"wild" possibility if 00 is possible).  We can minimize the use of wilds
by preserving 2-pairs which won't have them.
- So we need 5 properties
